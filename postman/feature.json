{
	"info": {
		"_postman_id": "228fe116-c5d1-49d4-99be-03a5ae6038ad",
		"name": "Test Explore With Me - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "41726295"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Добавление нового комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        comment = rnd.getComment(event.id);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, text, authorName, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('eventId');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('created');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария \"Пользователь не найден\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id + 1)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        comment = rnd.getComment(event.id);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.be.notFound;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария \"Событие не найдено\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        comment = rnd.getComment(event.id + 1);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.be.notFound;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария \"Валидация: eventId=null\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        comment = rnd.getComment(null);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.be.badRequest;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария \"Валидация: text length=min\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let comment;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id)",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        comment = rnd.getComment(event.id);",
									"        comment.text = \"123456789\";",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(comment),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.be.badRequest;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let commentForUpdate;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        const comment = await api.addComment(user.id, rnd.getComment(event.id));",
									"        pm.collectionVariables.set(\"cid\", comment.id);",
									"        commentForUpdate = rnd.getComment(event.id);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(commentForUpdate),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля: id, eventId, text, authorName, created\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('eventId');",
									"pm.expect(target).to.have.property('text');",
									"pm.expect(target).to.have.property('authorName');",
									"pm.expect(target).to.have.property('created');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "Id комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария \"Комментарий не найден\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let commentForUpdate;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        const comment = await api.addComment(user.id, rnd.getComment(event.id));",
									"        pm.collectionVariables.set(\"cid\", comment.id + 1);",
									"        commentForUpdate = rnd.getComment(event.id);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(commentForUpdate),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
									"    pm.response.to.be.notFound;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "Id комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария \"Не доступно для редактирования\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let commentForUpdate;",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id + 1);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        const comment = await api.addComment(user.id, rnd.getComment(event.id));",
									"        pm.collectionVariables.set(\"cid\", comment.id);",
									"        commentForUpdate = rnd.getComment(event.id);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(commentForUpdate),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
									"    pm.response.to.be.badRequest;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "Id комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление автором комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        const comment = await api.addComment(user.id,rnd.getComment(event.id));",
									"        pm.collectionVariables.set(\"cid\", comment.id);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "Id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "Id комментария"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление администратором комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        const comment = await api.addComment(user.id,rnd.getComment(event.id));",
									"        pm.collectionVariables.set(\"cid\", comment.id);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "id комментрия"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев к событию администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        let user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventBody = rnd.getEvent(category.id);",
									"        eventBody['requestModeration'] = true",
									"        let event = await api.addEvent(user.id, eventBody);",
									"        event = await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eid\", event.id);",
									"",
									"        user = await api.addUser(rnd.getUser());",
									"        let comment = await api.addComment(user.id,rnd.getComment(event.id));",
									"        user = await api.addUser(rnd.getUser());",
									"        comment = await api.addComment(user.id,rnd.getComment(event.id));",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Коментарии должны содержать поля: name, text\", function () {",
									"    pm.expect(target[0]).to.have.property('authorName');",
									"    pm.expect(target[0]).to.have.property('text');",
									"    pm.expect(target[1]).to.have.property('authorName');",
									"    pm.expect(target[1]).to.have.property('text');",
									"});",
									"",
									"pm.test(\"Должено быть найдено два комментария\", function () {",
									"    pm.expect(target.length).to.eql(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": 1,\n    \"text\": \"asdfg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "id события"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							"API = class {",
							"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
							"        this.baseUrl = baseUrl;",
							"        this.pm = postman;",
							"        this._verbose = verbose;",
							"    }",
							"",
							"    async addUser(user, verbose=null) {",
							"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
							"    }",
							"",
							"    async addCategory(category, verbose=null) {",
							"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
							"    }",
							"",
							"    async addEvent(userId, event, verbose=null) {",
							"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
							"    }",
							"",
							"    async addCompilation(compilation, verbose=null) {",
							"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
							"    }",
							"",
							"    async addComment(userId, comment, verbose=null) {",
							"        return this.post('/users/' + userId + '/comments', comment, \"Ошибка при добавлении нового комментария: \", verbose);",
							"    }",
							"",
							"    async publishParticipationRequest(eventId, userId, verbose=null) {",
							"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
							"    }",
							"",
							"    async publishEvent(eventId, verbose=null) {",
							"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
							"    }",
							"    ",
							"    async rejectEvent(eventId, verbose=null) {",
							"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
							"    }",
							"",
							"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
							"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
							"    }",
							"",
							"    async findCategory(catId, verbose=null) {",
							"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
							"    }",
							"",
							"    async findCompilation(compId, verbose=null) {",
							"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
							"    }",
							"",
							"    async findEvent(eventId, verbose=null) {",
							"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
							"    }",
							"",
							"    async findUser(userId, verbose=null) {",
							"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
							"    }",
							"",
							"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
							"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
							"    }",
							"",
							"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
							"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
							"    }",
							"",
							"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
							"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
							"    }",
							"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
							"        return new Promise((resolve, reject) => {",
							"            verbose = verbose == null ? this._verbose : verbose;",
							"            const request = {",
							"                url: this.baseUrl + path,",
							"                method: method,",
							"                body: body == null ? \"\" : JSON.stringify(body),",
							"                header: { \"Content-Type\": \"application/json\" },",
							"            };",
							"            if(verbose) {",
							"                console.log(\"Отправляю запрос: \", request);",
							"            }",
							"",
							"            try {",
							"                this.pm.sendRequest(request, (error, response) => {",
							"                    if(error || (response.code >= 400 && response.code <= 599)) {",
							"                        let err = error ? error : JSON.stringify(response.json());",
							"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
							"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
							"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
							"",
							"                        reject(new Error(errorText + err));",
							"                    }",
							"                    if(verbose) {",
							"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
							"                    }",
							"                    if (response.stream.length === 0){",
							"                        reject(new Error('Отправлено пустое тело ответа'))",
							"                    }else{",
							"                        resolve(response.json());",
							"                    }",
							"                });",
							"                ",
							"            } catch(err) {",
							"                if(verbose) {",
							"                    console.error(errorText, err);",
							"                }",
							"                return Promise.reject(err);",
							"            }",
							"        });",
							"    }",
							"};",
							"",
							"RandomUtils = class {",
							"    constructor() {}",
							"",
							"    getUser() {",
							"        return {",
							"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
							"            email: pm.variables.replaceIn('{{$randomEmail}}')",
							"        };",
							"    }",
							"",
							"    getCategory() {",
							"        return {",
							"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
							"        };",
							"    }",
							"",
							"    getEvent(categoryId) {",
							"        return {",
							"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
							"            category: categoryId,",
							"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
							"            eventDate: this.getFutureDateTime(),",
							"            location: {",
							"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
							"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
							"            },",
							"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
							"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
							"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
							"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
							"        }",
							"    }",
							"",
							"    getCompilation(...eventIds) {",
							"        return {",
							"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
							"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
							"            events: eventIds",
							"        };",
							"    }",
							"",
							"    getComment(eventId) {",
							"        return {",
							"            eventId: eventId,",
							"            text: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50)",
							"        };",
							"    }",
							"",
							"",
							"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
							"        let moment = require('moment');",
							"",
							"        let m = moment();",
							"        m.add(hourShift, 'hour');",
							"        m.add(minuteShift, 'minute');",
							"        m.add(yearShift, 'year');",
							"",
							"        return m.format('YYYY-MM-DD HH:mm:ss');",
							"    }",
							"",
							"    getWord(length = 1) {",
							"        let result = '';",
							"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
							"        const charactersLength = characters.length;",
							"        let counter = 0;",
							"        while (counter < length) {",
							"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
							"            counter += 1;",
							"        }",
							"        return result;",
							"    }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "cid",
			"value": "1"
		},
		{
			"key": "eid",
			"value": "1"
		}
	]
}